import me.modmuss50.mpp.ReleaseType

plugins {
    id 'java-library'
    id 'idea'
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'net.neoforged.moddev' version '0.1.108' apply false
    id 'me.modmuss50.mod-publish-plugin' version '0.4.2'
}

group='de.wonejo.gapi'
version="${mod_version}-fabric"
base.archivesName="[${mc_version}]${mod_name}"

java {
    toolchain {
        languageVersion=JavaLanguageVersion.of(21)
        vendor=JvmVendorSpec.MICROSOFT
    }

    withSourcesJar()
    withJavadocJar()
    sourceCompatibility=JavaVersion.VERSION_21
    targetCompatibility=JavaVersion.VERSION_21
}

sourceSets {
    main {
        resources.srcDirs += ['src/generate/resources', project(":Common").sourceSets.main.resources.srcDirs ]
    }
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    mavenCentral ()
}

dependencies {
    minecraft "com.mojang:minecraft:${mc_version}"
    mappings loom.layered {
        officialMojangMappings ()
        parchment ("org.parchmentmc.data:parchment-${parchment_mc_version}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api}"

    compileOnly project(":Common")
}

loom {
    runs {
        named('client') {
            client()
            configName="Fabric Client"
            ideConfigGenerated=true
            runDir('run/client')
            environmentVariable('DevWorkspace', 'client')
            programArg '--username=Dev'
        }
        named('server') {
            server()
            configName="Fabric Server"
            ideConfigGenerated=true
            runDir('run/server')
            environmentVariable('DevWorkspace', 'client')
            programArg '--nogui'
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

publishMods {
    type = ReleaseType.of(release_type)
    file = jar.archiveFile.get()
    modLoaders.add('fabric')
    version="${mc_version}-${mod_version}"
    displayName="${mod_name} ${mc_version}-${mod_version}"

    modrinth {
        accessToken = findProperty("MODRINTH_API") ?: "DUMMY"
        projectId = modrinth_id
        minecraftVersions.add mc_version
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}